-- Stworzy wyzwalacz, ktory sprawdzi aktualne (przy update'ie) MMR i przyporządkuje go do odpowiedniej rangi
-- Nowy GRACZ nie może mieć rangi innej niż unranked i MMR mniejszego niż 1000
ALTER TRIGGER TR_PLAYER
ON PLAYER
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @DELETED_ROWS INT, @INSERTED_ROWS INT
	DECLARE @ID_PLAYER INT, @MMR INT, @ID_RANK INT, @ID_RANK_UNRANKED INT
	SELECT @DELETED_ROWS = COUNT(*) FROM DELETED
	IF @DELETED_ROWS = 0 -- INSERT
	BEGIN	
		DECLARE CUR CURSOR FOR SELECT ID_PLAYER, MMR, ID_RANK FROM INSERTED
		SELECT @ID_RANK_UNRANKED = ID_RANK FROM RANK WHERE RANK.NAME = 'UNRANKED'
        PRINT CAST(@ID_RANK_UNRANKED AS VARCHAR(30))
		OPEN CUR
		FETCH NEXT FROM CUR INTO @ID_PLAYER, @MMR, @ID_RANK
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @ID_RANK != @ID_RANK_UNRANKED OR @MMR < 1000
			BEGIN
				DELETE FROM PLAYER WHERE ID_PLAYER = @ID_PLAYER
			END
			FETCH NEXT FROM CUR INTO @ID_PLAYER, @MMR, @ID_RANK
		END
		CLOSE CUR
		DEALLOCATE CUR
	END
	ELSE
	BEGIN 
		SELECT @INSERTED_ROWS = COUNT(*) FROM INSERTED
		IF @INSERTED_ROWS = 0 -- DELETE
		BEGIN		
		PRINT ''
		END
		ELSE -- UPDATE
        BEGIN
			DECLARE CUR1 CURSOR FOR SELECT ID_PLAYER, MMR FROM INSERTED
			OPEN CUR1
			FETCH NEXT FROM CUR1 INTO @ID_PLAYER, @MMR
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SELECT @ID_RANK = RANK_MMR.ID_RANK FROM RANK_MMR, PLAYER WHERE PLAYER.ID_PLAYER = @ID_PLAYER AND (PLAYER.MMR BETWEEN RANK_MMR.LOSAL AND RANK_MMR.HISAL)
				UPDATE PLAYER SET ID_RANK = @ID_RANK WHERE ID_player = @ID_PLAYER
				FETCH NEXT FROM CUR1 INTO @ID_PLAYER, @MMR
			END
			CLOSE CUR1
			DEALLOCATE CUR1
		END
	END
END