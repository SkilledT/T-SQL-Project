-- 5 zapytań, wszystkie z podzapytaniami

-- > min 2 skorelowane
-- > co najmniej 2 z group by w klauzuli having
-- DLA KAŻDEJ DYWIZJI WYBRAĆ GRACZA Z NAJWIĘKSZĄ ILOŚCIĄ PUNKTÓW MMR (OTRZYMAJĄ ONI DODATKOWO 5000BE)
SELECT P1.NICKNAME
FROM PLAYER P1
GROUP BY P1.ID_RANK, P1.NICKNAME
HAVING MAX(MMR) >= ALL(
	SELECT P2.MAX(MMR)
	FROM PLAYER P2
	WHERE P1.ID_PLAYER = P2.ID_PLAYER
)


-- DO CELÓW STATYSTYCZNYCH FIRMA ZBIERA DANE NA TEMAT TZW. "TOXIC BEHAVIOUR" CZYLI DANYCH NA TEMAT KAR PRZYDZIELONYCH GRACZĄ. BADAMY KORELACJE MIEDZY RANGĄ GRACZA A UZYSKANYMI PRZEZ NIEGO KARAMI. DLA KAŻDEJ DYWIZJI WYBIERZ GRACZA WRAZ Z ILOŚCIĄ NAŁOŻONYCH NA NIEGO KAR.
SELECT P1.NICKNAME, P1.ID_RANK, COUNT(ID_SUSPENSION)
FROM PLAYER P1 INNER JOIN PLAYER_ACC_HIST ACC ON P1.ID_PLAYER = ACC.ID_PLAYER
GROUP BY P1.ID_RANK, P1.NICKNAME
HAVING COUNT(ID_SUSPENSION) >= ALL(
	SELECT COUNT(ID_SUSPENSION)
	FROM PLAYER_ACC_HIST ACC2 INNER JOIN PLAYER P2 ON ACC2.ID_PLAYER = P2.ID_PLAYER
    WHERE P1.ID_rank = P2.ID_rank
	GROUP BY ACC2.ID_PLAYER
)

-- > co najmniej 2 w klauzuli where
-- WYBIERZ GRACZY, KTÓRZY  ZAGRALI PRZYNAJMNIEJ DWIE GRY. DOSTANĄ ONE DODATKOWO 1000BE.
SELECT P1.Nickname
FROM PLAYER P1 WHERE ID_PLAYER IN (
    SELECT ID_PLAYER
    FROM GAME G2
    WHERE P1.ID_player = G2.ID_player
    GROUP BY G2.ID_player
    having count(*) >= 2
)

-- W CELU POPRAWIENIA AKTYWNOŚCI GRACZY FIRMA PLANUJE WPROWADZIĆ NOWY SYSTEM, W KTÓRYM GRACZ, KTÓREGO AKTYWNOŚĆ JEST NISKA BĘDZIE TRACIĆ DANĄ ILOŚĆ MMR.
-- DO PODJĘCIA DECYZJI FIRMA POTRZEBUJE LISTĘ GRACZY, KTÓRY NIE ZAGRALI JESZCZE ŻADNEGO MECZY W TYM ROKU.
SELECT P1.NICKNAME
FROM PLAYER P1
WHERE P1.ID_PLAYER NOT IN (
	SELECT G1.ID_PLAYER
	FROM GAME G1
	GROUP BY G1.ID_PLAYER
)


-- POZOSTAŁE
-- DLA CELÓW STATYSTYCZNYCH GRA ZBIERA DANE NA TEMAT KORELACJI WYBORY ZAWODNIKÓW (CHAMPIONÓW) DOSTĘPNYCH DLA GRACZY, A ICH RANGĄ. DLA KAŻDEJ DYWIZJI WYBIERZ ŚREDNIĄ ILOŚĆ ZAWODNIKÓW DLA KAŻDEJ RANGI.

SELECT ID_RANK, AVG(PLAYER_CHAMPION.ID_CHAMPION)
FROM PLAYER
	INNER JOIN PLAYER_CHAMPION ON PLAYER.ID_PLAYER = PLAYER_CHAMPION.ID_PLAYER
GROUP BY PLAYER.ID_RANK